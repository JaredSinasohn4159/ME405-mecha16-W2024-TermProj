from ulab import numpy as np
import utime
# The following code was written by hand in matlab but converted to python using ChatGPT
def cam2setpoint(im):
    # Hardcoded X-Y planes
    X_plane = np.array([np.linspace(-27.5, 27.5, 32)] * 24)
    Y_plane = np.array([np.linspace(17.5, -17.5, 24)] * 32).T
    noisefilt = np.array([[0,85,49,85,48,85,55,85,48,85,70,85,61,85,72,85,69,85,85,85,74,85,85,85,85,85,85,85,85,85,85,85],
                            [0,77,32,85,29,74,36,85,46,82,43,85,53,85,52,85,65,85,59,85,66,75,68,85,78,85,67,85,84,85,79,85],
                            [0,85,18,85,21,85,40,85,25,85,58,85,50,85,66,85,54,85,71,85,60,85,85,85,69,85,84,85,78,85,85,85],
                            [0,74,26,85,35,80,43,85,49,81,43,85,59,85,57,85,61,85,64,85,73,85,63,85,85,85,75,85,84,85,79,85],
                            [0,85,45,85,39,85,61,85,51,85,75,85,55,85,85,85,66,85,85,85,77,85,85,85,80,85,85,85,85,85,85,85],
                            [0,83,23,85,43,85,41,85,46,85,55,85,67,85,62,85,62,85,72,85,79,85,75,85,81,85,83,85,85,85,78,85],
                            [0,85,41,85,34,85,54,85,35,85,62,85,48,85,66,85,63,85,79,85,66,85,79,85,75,85,85,85,85,85,85,85],
                            [0,57,9,85,30,61,30,85,31,80,39,85,43,66,36,85,56,75,54,85,54,78,54,85,65,84,61,85,76,75,60,85],
                            [0,85,47,85,38,85,58,85,49,85,69,85,51,85,67,85,67,85,84,85,77,85,85,85,85,85,85,85,85,85,85,85],
                            [0,70,24,85,34,73,37,85,49,71,42,85,54,69,47,85,67,81,59,85,72,85,70,85,71,79,69,85,81,78,80,85],
                            [0,85,50,85,30,85,64,85,52,85,80,85,57,85,79,85,68,85,85,85,78,85,85,85,85,85,85,85,85,85,85,85],
                            [0,81,25,85,36,77,43,85,57,85,50,85,62,79,65,85,67,85,65,85,67,85,64,85,79,82,82,85,85,85,74,85],
                            [0,85,34,85,32,85,57,85,42,85,68,85,54,85,75,85,64,85,85,85,74,85,85,85,85,85,85,85,85,85,85,85],
                            [0,74,26,85,34,72,29,85,48,71,40,85,48,69,57,85,58,62,57,85,64,78,56,85,69,73,58,85,75,71,72,85],
                            [0,85,41,85,33,85,58,85,47,85,73,85,51,85,70,85,58,85,82,85,72,85,85,85,84,85,85,85,85,85,85,85],
                            [0,64,16,85,37,65,39,85,34,61,36,85,44,67,50,85,49,70,45,85,57,67,51,85,71,74,54,85,71,64,62,85],
                            [0,85,39,85,35,85,59,85,46,85,65,85,61,85,71,85,56,85,85,85,80,85,85,85,77,85,85,85,85,85,85,85],
                            [0,65,27,85,32,65,28,85,41,59,36,85,49,58,49,85,43,68,50,85,55,69,55,85,53,56,62,85,74,61,66,85],
                            [0,85,42,85,41,85,54,85,40,85,62,85,49,85,68,85,53,85,80,85,67,85,85,85,74,85,85,85,85,85,85,85],
                            [0,51,12,78,39,42,25,85,38,41,30,85,40,56,27,85,36,47,45,85,44,48,41,85,63,52,55,85,59,52,56,66],
                            [0,85,50,85,43,85,69,85,33,85,73,85,54,85,73,85,57,85,77,85,72,85,85,85,75,85,85,85,78,85,85,85],
                            [0,55,33,85,38,57,33,85,40,56,38,85,43,47,42,85,54,65,47,85,57,56,44,85,55,53,54,85,65,42,62,79],
                            [0,68,35,73,9,70,35,85,27,85,51,85,38,85,45,85,36,80,57,85,36,80,69,85,46,85,60,85,60,85,85,84],
                            [0,56,12,62,16,36,28,81,28,42,28,76,45,43,33,85,26,35,31,74,27,31,30,66,42,36,40,61,54,24,44,54]])
    boy_temp = im-noisefilt
    boy_temp = boy_temp / np.max(boy_temp) * 255
    binboy_temp = boy_temp > 255 / 2
    # Heat centroid calc
    ROI_temp = boy_temp * binboy_temp
    ROIsum_temp = np.sum(ROI_temp)
    X_temp = np.sum(ROI_temp * X_plane) / ROIsum_temp
    Y_temp = np.sum(ROI_temp * Y_plane) / ROIsum_temp
    return X_temp, Y_temp
if __name__=="__main__":
    noisefilt = np.array([[64,157,82,136,82,133,85,144,72,139,82,131,72,141,95,133,85,136,103,139,92,144,110,146,110,151,123,144,121,162,139,159],
                            [66,100,79,113,79,90,69,128,77,87,69,108,74,92,72,105,87,92,79,108,79,92,90,123,103,97,105,128,118,115,113,136],
                            [54,144,77,141,72,139,87,151,72,128,85,128,74,133,82,131,77,131,110,136,92,149,108,144,103,144,123,144,113,154,121,151],
                            [61,100,77,118,79,97,72,128,74,82,74,115,74,87,74,123,77,92,90,123,90,105,100,126,97,97,97,126,131,103,115,136],
                            [54,136,82,139,79,136,92,144,64,121,77,126,66,115,85,133,69,149,213,249,115,144,108,149,108,149,113,157,113,157,133,164],
                            [59,92,64,108,77,90,69,126,66,79,56,105,74,82,61,110,82,100,170,218,110,103,92,126,97,97,95,126,113,115,105,136],
                            [59,133,85,141,74,133,85,131,69,115,74,126,69,126,82,133,95,172,234,255,131,154,100,136,103,151,121,151,113,159,131,159],
                            [64,87,54,108,66,82,64,113,61,77,54,103,79,72,54,115,105,146,198,221,128,126,90,105,90,85,82,115,110,103,100,131],
                            [48,141,74,133,66,133,82,131,66,126,79,110,66,113,92,175,190,255,211,242,193,234,115,149,97,149,113,146,110,149,126,154],
                            [51,92,56,118,66,92,61,108,59,64,46,92,69,69,87,172,180,177,164,195,180,175,97,133,87,92,85,113,105,90,87,121],
                            [56,133,74,123,59,123,87,131,64,115,74,126,69,113,136,231,157,218,167,208,167,211,141,159,105,133,118,141,103,151,118,154],
                            [43,82,48,103,54,79,54,103,56,66,51,95,61,72,123,200,144,151,144,167,149,172,123,139,95,79,90,113,90,87,87,118],
                            [56,136,82,115,66,131,85,133,59,108,61,118,59,113,177,239,136,185,151,188,154,208,180,164,97,136,105,131,105,151,123,141],
                            [56,92,54,90,66,87,56,100,51,56,43,85,54,61,151,198,123,118,123,154,133,128,149,139,87,79,61,87,90,79,82,103],
                            [61,131,87,128,82,139,87,128,51,105,77,105,72,133,190,185,133,182,131,177,133,164,200,185,97,139,108,139,110,141,133,139],
                            [56,74,56,92,61,66,51,95,48,56,33,72,46,87,136,133,110,110,100,133,110,103,157,157,85,82,77,105,95,87,77,100],
                            [56,115,82,123,69,123,79,131,77,118,82,121,100,182,144,151,123,164,126,162,126,144,206,208,95,131,97,126,92,128,113,149],
                            [38,77,46,97,51,66,38,97,56,64,43,85,118,139,100,103,95,90,85,115,97,108,164,177,90,64,66,87,72,59,64,85],
                            [48,131,69,110,72,110,79,123,72,115,85,121,82,144,118,141,92,136,103,133,100,136,133,154,97,139,108,126,97,115,118,121],
                            [36,69,38,82,48,59,41,82,38,51,43,72,48,64,74,103,69,61,56,95,74,61,90,103,74,54,54,79,66,59,64,64],
                            [46,118,72,110,64,123,82,118,54,108,72,118,61,108,103,139,82,121,97,139,103,139,105,126,87,110,103,121,87,113,108,105],
                            [28,59,38,66,48,48,36,72,36,36,30,61,33,43,48,97,66,61,66,82,66,61,51,69,54,38,48,69,48,41,56,59],
                            [54,113,77,100,56,103,77,108,64,108,77,105,59,115,92,136,72,128,103,123,79,118,103,118,82,108,95,110,100,110,110,113],
                            [0,25,0,30,12,12,2,33,12,15,7,33,18,20,20,54,25,25,28,48,25,23,12,43,33,12,5,30,30,12,28,28]])
    starttime = utime.ticks_us()
    cam2setpoint(noisefilt)
    totaltime = utime.ticks_diff(utime.ticks_us(), starttime)
    print(f"Time to complete operations: {totaltime} us")
    
